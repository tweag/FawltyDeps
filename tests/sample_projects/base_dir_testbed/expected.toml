[project]
# General information about a simplified project: Its name, why we test it,
# its relation to real world projects
name = "base_dir_testbed"
description = """
  A project whose toplevel directory is not the base directory for 1st-party
  imports: ./subproject/main/main.py imports ./subproject/lib/foo as `lib.foo`
  because the base directory is ./subproject.
"""

[experiments.fail_with_files]
description = "Failing run when files are passed, but no --base-dir"
code = ["subproject/main/main.py", "subproject/lib/foo.py"]
# base_dir = ... # No base dir,
undeclared_deps = ["lib"]  # so `lib` is incorrectly seen as a 3rd-party dep.

[experiments.succeed_with_files_and_base_dir]
description = "Successful run with files and --base-dir"
code = ["subproject/lib/foo.py", "subproject/main/main.py"]
base_dir = "subproject" # Correct base_dir,
undeclared_deps = [] # so `lib` is correctly seen as base for 1st-party imports.

[experiments.fail_with_dirs]
description = "Failing run when dirs are passed, but no --base-dir"
code = ["subproject/main", "subproject/lib"]
# base_dir = ... # No base dir,
undeclared_deps = ["lib"]  # so `lib` is incorrectly seen as a 3rd-party dep.

[experiments.succeed_with_dirs_and_base_dir]
description = "Successful run with dirs and --base-dir"
code = ["subproject/lib", "subproject/main"]
base_dir = "subproject" # Correct base_dir,
undeclared_deps = [] # so `lib` is correctly seen as base for 1st-party imports.
