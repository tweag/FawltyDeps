[project]
# General information about the 3rd-party project: Its name, why we test it,
# and where to find the relevant tarball, along with its expected checksum.
name = "detect-waste"
description = "A data science project for detecting waste in the invironment."
url = "https://github.com/wimlds-trojmiasto/detect-waste/archive/0a4367b121e4bfabdfb148b323090573ac2dadc2.tar.gz"
sha256 = "b7c34d528bba97a4ace1aa6efee90d31ae1419581577d6ee13c3cf6718357e36"
# The SHA256 checksum above can be found by running `sha256sum` on the
# downloaded tarball. It is used to ensure that we run tests against the
# expected revision of the 3rd-party project.

# Below are our expectations for running FawltyDeps on the above (unpacked)
# tarball. Each table represents the expectations of a corresponding test case
# inside ../test_real_projects.py. All tables are optional: Removing a table
# will disable the corresponding test case. An empty table means that we expect
# FawltyDeps to produce zero results/empty output for that test.
#
# Inside each table, we map filenames to lists of relevant packages (imports or
# dependencies) that we expect FawltyDeps to return for that test. This is
# described in more detail under each table:

[imports]
# What we expect `fawltydeps --list-imports` to return for this project.
# Key: filename containing import statements
# Value: list (set) of external packages imported
"<unused>" = [
  "PIL",
  "albumentations",
  "apex",
  "coco_eval",
  "coco_utils",
  "cut_bbox_litter",
  "cv2",
  "data",
  "datasets",
  "demo",
  "effdet",
  "efficientnet_pytorch",
  "engine",
  "funcy",
  "iterstrat",
  "matplotlib",
  "models",
  "neptune",
  "numpy",
  "omegaconf",
  "pandas",
  "panopticapi",
  "plot_utils",
  "pycocotools",
  "pylab",
  "pytorch_lightning",
  "requests",
  "scikitplot",
  "scipy",
  "seaborn",
  "setuptools",
  "skimage",
  "sklearn",
  "sotabencheval",
  "timm",
  "torch",
  "torchvision",
  "tqdm",
  "train",
  "train_resnet",
  "transforms",
  "util",
  "yaml"
]

[declared_deps]
# What we expect `fawltydeps --list-deps` to return for this project.
# Key: filename containing declared dependencies
# Value: list (set) of packages names that are declared
"<unused>" =  [
  "albumentations",
  "cython",
  "funcy",
  "iterative-stratification",
  "matplotlib",
  "numpy",
  "oauthlib",
  "olefile",
  "omegaconf",
  "opencv-contrib-python",
  "pillow",
  "pycocotools",
  "pyyaml",
  "scikit-image",
  "scikit-learn",
  "scipy",
  "seaborn",
  "timm",
  "torch",
  "torchvision"
]

[undeclared_deps]
# What we expect `fawltydeps --check-undeclared` to return for this project.
# Key: filename containing import statements
# Value: list (set) of external packages imported without being declared
"<unused>" = [
  "PIL",
  "apex",
  "coco_eval",
  "coco_utils",
  "cut_bbox_litter",
  "cv2",
  "data",
  "datasets",
  "demo",
  "effdet",
  "efficientnet_pytorch",
  "engine",
  "iterstrat",
  "models",
  "neptune",
  "pandas",
  "panopticapi",
  "plot_utils",
  "pylab",
  "pytorch_lightning",
  "requests",
  "scikitplot",
  "setuptools",
  "skimage",
  "sklearn",
  "sotabencheval",
  "tqdm",
  "train",
  "train_resnet",
  "transforms",
  "util",
  "yaml",

]

[unused_deps]
# What we expect `fawltydeps --check-unused` to return for this project.
# Key: filename containing declared dependencies
# Value: list (set) of external packages imported
"<unused>" =  [
  "cython",
  "iterative-stratification",
  "oauthlib",
  "olefile",
  "opencv-contrib-python",
  "pillow",
  "pyyaml",
  "scikit-image",
  "scikit-learn"
  ]
